{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KVM & QEMU Notlar\u0131 Merhaba Bu sayfa Qemu ve KVM \u00fczerine \u00e7al\u0131\u015f\u0131rken al\u0131nm\u0131\u015f baz\u0131 notlard\u0131r. QEMU Nedir QEMU (Quick Emulator) ihtiya\u00e7 duyulan donan\u0131mlar\u0131 h\u0131zl\u0131 bir \u015fekilde taklit edebilecek bir em\u00fclat\u00f6rd\u00fcr. QEMU farkl\u0131 CPU \u00e7e\u015fitlerini (x86, PowerPC, ARM vb.) farkl\u0131 mimarilerde (x86, PowerPC, ARM, Sparc, MIPS vb.) kullanmaya izin vermektedir. Ayn\u0131 zamanda donan\u0131m ile sanalla\u015ft\u0131rmay\u0131 da desteklemektedir. K\u0131saca QEMU'nun temel \u00f6zelliklerini \u015fu \u015fekilde s\u0131ral\u0131yabiliriz. Full Em\u00fclat\u00f6r Dynamic Translation KVM ile birlikte kullan\u0131larak sanalla\u015ft\u0131rma yapabilmektedir. QEMU Tarih\u00e7esi QEMU 2003 y\u0131l\u0131nda Fabrice Bellard taraf\u0131ndan duyurulmu\u015f ve GPLv2 ile lisanslanm\u0131\u015ft\u0131r. Ayn\u0131 zamanda program\u0131n baz\u0131 par\u00e7alar\u0131 da BSD lisans\u0131 ile lisanslanm\u0131\u015ft\u0131r. \u015eu an bir \u00e7ok farkl\u0131 b\u00f6l\u00fcme ayr\u0131lan QEMU projesi \u00f6zellikle RedHat ekibi taraf\u0131ndan g\u00fcncel tutulmaktad\u0131r. Ayn\u0131 zamanda b\u00fcy\u00fck bir topluluk deste\u011fi ile birlikte geli\u015ftirilmektedir. Guest CPU cores (TCG) FPU emulation ARM TCG CPUs AVR TCG CPUs MIPS TCG CPUs OpenRISC TCG CPUs PowerPC TCG CPUs RISC-V TCG CPUs ....... T\u00fcm listeye maintainer referanslar\u0131ndan ula\u015f\u0131labilir. Qemu Kaynak Kodunun \u0130ncelenmesi Bu yaz\u0131da QEMU\u2019nun kaynak kodu temel seviyede incelenecektir. Bu ba\u011flamda ilk olarak, QEMU\u2019nun ba\u015flang\u0131c\u0131nda \u00e7al\u0131\u015ft\u0131r\u0131lan main fonksiyonu incelenecektir. Main fonksiyonu QEMU/softmmu/main.c klas\u00f6r\u00fc alt\u0131nda bulunur. main fonksiyonu i\u00e7erisinde sadece 3 fonkisyon \u00e7a\u011fr\u0131l\u0131r. qemu_init() qemu_main_loop() qemu_cleanup() int main(int argc, char **argv, char **envp) { qemu_init(argc, argv, envp); qemu_main_loop(); qemu_cleanup(); return 0; } Fonksiyon A\u00e7\u0131klama qemu_init_subsystems() - cpu_list, cpu_loop, crypto init ediliyor qemu_validate_options() - QEMU'ya verilen ayarlar burada kontrol edilmekte ve olu\u015fabilicek yanl\u0131\u015flar\u0131n \u00f6n\u00fcne ge\u00e7ilmektedir qemu_process_early_options() - ? + log dosyalar\u0131 haz\u0131rlan\u0131yor qemu_init_main_loop() - QEMU, main_loop'un ba\u015flamas\u0131 i\u00e7in \u00f6n haz\u0131rl\u0131kl\u0131klar\u0131 yapmaktad\u0131r. cpu_timer_init() - QEMU, CPU i\u00e7in \u00e7al\u0131\u015facak ger\u00e7ek zamanl\u0131 saatin frekans ve geri kalan ayarlar\u0131n\u0131 yapmaktad\u0131r configure_rtc() - QEMU, RTC ayarlar\u0131 yap\u0131l\u0131yor (UTC) qemu_create_machine() - QEMU, sim\u00fcle edilecek cihaz\u0131 olu\u015fturmaktad\u0131r qemu_disable_default_devices() - Sanal cihaza ba\u011fl\u0131 seri ba\u011flant\u0131lar (SD kart, CD-ROM) ve grafik hizmetleri durdurulur. qemu_create_default_devices() - Serial ve grafik cihazlar\u0131n\u0131 olu\u015fturulur. qemu_create_early_backends() - ??? configure_accelerators() - Kullan\u0131lacak h\u0131zland\u0131r\u0131c\u0131 se\u00e7ilmektedir bunlar kvm veya tcg olabilmektedir. migration_object_init() - ??? qemu_create_late_backends() - ??? accel_init_interfaces() - CPU aray\u00fczleri ba\u015flat\u0131l\u0131r. qemu_init_displays() - Lokal ve uzak displayler ba\u015flat\u0131l\u0131r. os_setup_post()","title":"Qemu"},{"location":"#kvm-qemu-notlar","text":"Merhaba Bu sayfa Qemu ve KVM \u00fczerine \u00e7al\u0131\u015f\u0131rken al\u0131nm\u0131\u015f baz\u0131 notlard\u0131r.","title":"KVM &amp; QEMU Notlar\u0131"},{"location":"#qemu-nedir","text":"QEMU (Quick Emulator) ihtiya\u00e7 duyulan donan\u0131mlar\u0131 h\u0131zl\u0131 bir \u015fekilde taklit edebilecek bir em\u00fclat\u00f6rd\u00fcr. QEMU farkl\u0131 CPU \u00e7e\u015fitlerini (x86, PowerPC, ARM vb.) farkl\u0131 mimarilerde (x86, PowerPC, ARM, Sparc, MIPS vb.) kullanmaya izin vermektedir. Ayn\u0131 zamanda donan\u0131m ile sanalla\u015ft\u0131rmay\u0131 da desteklemektedir. K\u0131saca QEMU'nun temel \u00f6zelliklerini \u015fu \u015fekilde s\u0131ral\u0131yabiliriz. Full Em\u00fclat\u00f6r Dynamic Translation KVM ile birlikte kullan\u0131larak sanalla\u015ft\u0131rma yapabilmektedir.","title":"QEMU Nedir"},{"location":"#qemu-tarihcesi","text":"QEMU 2003 y\u0131l\u0131nda Fabrice Bellard taraf\u0131ndan duyurulmu\u015f ve GPLv2 ile lisanslanm\u0131\u015ft\u0131r. Ayn\u0131 zamanda program\u0131n baz\u0131 par\u00e7alar\u0131 da BSD lisans\u0131 ile lisanslanm\u0131\u015ft\u0131r. \u015eu an bir \u00e7ok farkl\u0131 b\u00f6l\u00fcme ayr\u0131lan QEMU projesi \u00f6zellikle RedHat ekibi taraf\u0131ndan g\u00fcncel tutulmaktad\u0131r. Ayn\u0131 zamanda b\u00fcy\u00fck bir topluluk deste\u011fi ile birlikte geli\u015ftirilmektedir. Guest CPU cores (TCG) FPU emulation ARM TCG CPUs AVR TCG CPUs MIPS TCG CPUs OpenRISC TCG CPUs PowerPC TCG CPUs RISC-V TCG CPUs ....... T\u00fcm listeye maintainer referanslar\u0131ndan ula\u015f\u0131labilir.","title":"QEMU Tarih\u00e7esi"},{"location":"#qemu-kaynak-kodunun-incelenmesi","text":"Bu yaz\u0131da QEMU\u2019nun kaynak kodu temel seviyede incelenecektir. Bu ba\u011flamda ilk olarak, QEMU\u2019nun ba\u015flang\u0131c\u0131nda \u00e7al\u0131\u015ft\u0131r\u0131lan main fonksiyonu incelenecektir. Main fonksiyonu QEMU/softmmu/main.c klas\u00f6r\u00fc alt\u0131nda bulunur. main fonksiyonu i\u00e7erisinde sadece 3 fonkisyon \u00e7a\u011fr\u0131l\u0131r. qemu_init() qemu_main_loop() qemu_cleanup() int main(int argc, char **argv, char **envp) { qemu_init(argc, argv, envp); qemu_main_loop(); qemu_cleanup(); return 0; } Fonksiyon A\u00e7\u0131klama qemu_init_subsystems() - cpu_list, cpu_loop, crypto init ediliyor qemu_validate_options() - QEMU'ya verilen ayarlar burada kontrol edilmekte ve olu\u015fabilicek yanl\u0131\u015flar\u0131n \u00f6n\u00fcne ge\u00e7ilmektedir qemu_process_early_options() - ? + log dosyalar\u0131 haz\u0131rlan\u0131yor qemu_init_main_loop() - QEMU, main_loop'un ba\u015flamas\u0131 i\u00e7in \u00f6n haz\u0131rl\u0131kl\u0131klar\u0131 yapmaktad\u0131r. cpu_timer_init() - QEMU, CPU i\u00e7in \u00e7al\u0131\u015facak ger\u00e7ek zamanl\u0131 saatin frekans ve geri kalan ayarlar\u0131n\u0131 yapmaktad\u0131r configure_rtc() - QEMU, RTC ayarlar\u0131 yap\u0131l\u0131yor (UTC) qemu_create_machine() - QEMU, sim\u00fcle edilecek cihaz\u0131 olu\u015fturmaktad\u0131r qemu_disable_default_devices() - Sanal cihaza ba\u011fl\u0131 seri ba\u011flant\u0131lar (SD kart, CD-ROM) ve grafik hizmetleri durdurulur. qemu_create_default_devices() - Serial ve grafik cihazlar\u0131n\u0131 olu\u015fturulur. qemu_create_early_backends() - ??? configure_accelerators() - Kullan\u0131lacak h\u0131zland\u0131r\u0131c\u0131 se\u00e7ilmektedir bunlar kvm veya tcg olabilmektedir. migration_object_init() - ??? qemu_create_late_backends() - ??? accel_init_interfaces() - CPU aray\u00fczleri ba\u015flat\u0131l\u0131r. qemu_init_displays() - Lokal ve uzak displayler ba\u015flat\u0131l\u0131r. os_setup_post()","title":"Qemu Kaynak Kodunun \u0130ncelenmesi"},{"location":"ekler/","text":"Ekler QEMU'nun Derlenmesi QEMU'yu derlememiz i\u00e7in \u00f6ncelikle baz\u0131 paketleri indirmemiz gerekmektedir. Bunun i\u00e7in: sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev QEMU'nun g\u00fcncel kaynak kodunu \u00e7ekelim. git clone git://git.qemu-project.org/qemu.git QEMU'yu derleyelim. cd qemu mkdir -p bin/debug/native cd bin/debug/native ../../../configure --enable-debug make cd ../../.. QEMU \u00fczerinde k\u00fc\u00e7\u00fck bir test yaparak denemeyi sonland\u0131ral\u0131m. bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -L pc-bios Meson Build Sistemi Asl\u0131nda klas\u00f6r yap\u0131s\u0131 ile alakal\u0131 de\u011fil ancak burada \u00e7ok kullan\u0131ld\u0131\u011f\u0131 i\u00e7in meson hakk\u0131nda da k\u0131saca bahsetmek istiyorum. Meson sayesinde projeleri otomatik bir \u015fekilde build etmek m\u00fcmk\u00fcn olmaktad\u0131r. Ayn\u0131 zamanda Apache2 ile lisanslanm\u0131\u015ft\u0131r ve bir \u00e7ok a\u00e7\u0131k kaynak projede kullan\u0131lmaktad\u0131r. \u00d6rne\u011fin: GNOME ( ve GNOME uygulamalar\u0131 ) Libvirt QEMU X.Org Tan\u0131mlar x86: Intel'in 8086 mikroi\u015flemcisini ve onun 8088 varyant\u0131n\u0131 temel alarak Intel taraf\u0131ndan geli\u015ftiren bir buyruk k\u00fcmesi mimarisi ailesidir. PowerPC: PowerPC, AIM olarak bilinen 1991\u2019de Apple_IBM_Motorola birle\u015fimi taraf\u0131ndan meydana getirilmi\u015f bir RISC mikroi\u015flemcisidir ARM: D\u00fc\u015f\u00fck g\u00fc\u00e7 t\u00fcketimi ve y\u00fcksek performansl\u0131 RISC tabanl\u0131 bir i\u015flemci mimarisidir. Em\u00fclat\u00f6r: Farkl\u0131 mimarilerde donan\u0131mlar\u0131 taklit ederek bu donan\u0131mlar\u0131 \u00e7al\u0131\u015ft\u0131ran sistemlerdir. Sanalla\u015ft\u0131rma: \u0130\u015fletim sistemlerini birbirlerinden izole hale getirerek ayn\u0131 cihazda birden \u00e7ok i\u015fletim sistemini \u00e7al\u0131\u015ft\u0131rma i\u015flemidir. GPLv2 Lisans\u0131: GPLv2 lisans\u0131 \u00f6zg\u00fcr bir yaz\u0131l\u0131m lisans\u0131d\u0131r. Lisans detaylar\u0131na https://www.gnu.org/licenses/old-licenses/gpl-2.0.html adresinden ula\u015f\u0131labilir. GPLv3 Lisans\u0131: GPLv3 lisans\u0131 \u00f6zg\u00fcr bir yaz\u0131l\u0131m lisans\u0131d\u0131r. Lisans detaylar\u0131na https://www.gnu.org/licenses/gpl-3.0.html adresinden ula\u015f\u0131labilir. BSD Lisans\u0131: BSD lisanlar\u0131 \u00f6zg\u00fcr yaz\u0131l\u0131m lisanlar\u0131 aras\u0131na girmektedir. Lisans\u0131n detaylar\u0131na https://opensource.org/licenses/BSD-3-Clause ula\u015f\u0131labilir. Apache2 Lisans\u0131: Redhat: Red Hat, \u00f6zellikle a\u00e7\u0131k kaynak projeler ile profesyonel \u00e7\u00f6z\u00fcmler sunan yaz\u0131l\u0131m \u015firketidir. FPU (Floating Point Unit): CPU \u00fczerinde bulunmaktad\u0131r ve hassas hesaplamalarda g\u00f6rev almaktad\u0131r. Stub: Bilgisayar bilimlerinde bir kodun test edilebilmesi i\u00e7in haz\u0131rlanm\u0131\u015f uydurulmu\u015f verilerdir.","title":"Ekler"},{"location":"ekler/#ekler","text":"","title":"Ekler"},{"location":"ekler/#qemunun-derlenmesi","text":"QEMU'yu derlememiz i\u00e7in \u00f6ncelikle baz\u0131 paketleri indirmemiz gerekmektedir. Bunun i\u00e7in: sudo apt-get install git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev QEMU'nun g\u00fcncel kaynak kodunu \u00e7ekelim. git clone git://git.qemu-project.org/qemu.git QEMU'yu derleyelim. cd qemu mkdir -p bin/debug/native cd bin/debug/native ../../../configure --enable-debug make cd ../../.. QEMU \u00fczerinde k\u00fc\u00e7\u00fck bir test yaparak denemeyi sonland\u0131ral\u0131m. bin/debug/native/x86_64-softmmu/qemu-system-x86_64 -L pc-bios","title":"QEMU'nun Derlenmesi"},{"location":"ekler/#meson-build-sistemi","text":"Asl\u0131nda klas\u00f6r yap\u0131s\u0131 ile alakal\u0131 de\u011fil ancak burada \u00e7ok kullan\u0131ld\u0131\u011f\u0131 i\u00e7in meson hakk\u0131nda da k\u0131saca bahsetmek istiyorum. Meson sayesinde projeleri otomatik bir \u015fekilde build etmek m\u00fcmk\u00fcn olmaktad\u0131r. Ayn\u0131 zamanda Apache2 ile lisanslanm\u0131\u015ft\u0131r ve bir \u00e7ok a\u00e7\u0131k kaynak projede kullan\u0131lmaktad\u0131r. \u00d6rne\u011fin: GNOME ( ve GNOME uygulamalar\u0131 ) Libvirt QEMU X.Org","title":"Meson Build Sistemi"},{"location":"ekler/#tanmlar","text":"x86: Intel'in 8086 mikroi\u015flemcisini ve onun 8088 varyant\u0131n\u0131 temel alarak Intel taraf\u0131ndan geli\u015ftiren bir buyruk k\u00fcmesi mimarisi ailesidir. PowerPC: PowerPC, AIM olarak bilinen 1991\u2019de Apple_IBM_Motorola birle\u015fimi taraf\u0131ndan meydana getirilmi\u015f bir RISC mikroi\u015flemcisidir ARM: D\u00fc\u015f\u00fck g\u00fc\u00e7 t\u00fcketimi ve y\u00fcksek performansl\u0131 RISC tabanl\u0131 bir i\u015flemci mimarisidir. Em\u00fclat\u00f6r: Farkl\u0131 mimarilerde donan\u0131mlar\u0131 taklit ederek bu donan\u0131mlar\u0131 \u00e7al\u0131\u015ft\u0131ran sistemlerdir. Sanalla\u015ft\u0131rma: \u0130\u015fletim sistemlerini birbirlerinden izole hale getirerek ayn\u0131 cihazda birden \u00e7ok i\u015fletim sistemini \u00e7al\u0131\u015ft\u0131rma i\u015flemidir. GPLv2 Lisans\u0131: GPLv2 lisans\u0131 \u00f6zg\u00fcr bir yaz\u0131l\u0131m lisans\u0131d\u0131r. Lisans detaylar\u0131na https://www.gnu.org/licenses/old-licenses/gpl-2.0.html adresinden ula\u015f\u0131labilir. GPLv3 Lisans\u0131: GPLv3 lisans\u0131 \u00f6zg\u00fcr bir yaz\u0131l\u0131m lisans\u0131d\u0131r. Lisans detaylar\u0131na https://www.gnu.org/licenses/gpl-3.0.html adresinden ula\u015f\u0131labilir. BSD Lisans\u0131: BSD lisanlar\u0131 \u00f6zg\u00fcr yaz\u0131l\u0131m lisanlar\u0131 aras\u0131na girmektedir. Lisans\u0131n detaylar\u0131na https://opensource.org/licenses/BSD-3-Clause ula\u015f\u0131labilir. Apache2 Lisans\u0131: Redhat: Red Hat, \u00f6zellikle a\u00e7\u0131k kaynak projeler ile profesyonel \u00e7\u00f6z\u00fcmler sunan yaz\u0131l\u0131m \u015firketidir. FPU (Floating Point Unit): CPU \u00fczerinde bulunmaktad\u0131r ve hassas hesaplamalarda g\u00f6rev almaktad\u0131r. Stub: Bilgisayar bilimlerinde bir kodun test edilebilmesi i\u00e7in haz\u0131rlanm\u0131\u015f uydurulmu\u015f verilerdir.","title":"Tan\u0131mlar"},{"location":"kvm/","text":"KVM Nedir KVM, Linux \u00e7ekirde\u011fini tip-1 hypervisor'e d\u00f6n\u00fc\u015ft\u00fcren bir mod\u00fcld\u00fcr. Ayn\u0131 zamanda QEMU ile birle\u015ferek tip-2 hyperviz\u00f6r'e d\u00f6n\u00fc\u015ft\u00fcrebilmektedir. X86 i\u015flemciler i\u00e7in tasarlanm\u0131\u015ft\u0131r. KVM, sanalla\u015ft\u0131rmak i\u00e7in Intel VT-x veya AMD-V gibi \u00f6zel donan\u0131m gerektirir. KVM geli\u015ftiricileri Popek ve Goldberg'in \u00f6nerdi\u011fi 3 temel \u015fart\u0131 \u015fu \u015fekilde sa\u011flam\u0131\u015flard\u0131r. Equivalence: KVM, herhangi bir i\u015fletim sistemi fark\u0131 olmadan ve bir de\u011fi\u015fiklik yapmadan herhangi bir x86 i\u015fletim sistemini \u00e7al\u0131\u015ft\u0131rabilmelidir. Safety: KVM, sanal makineler aras\u0131nda b\u00fct\u00fcn bir izolasyon sa\u011flamaktad\u0131r. Bunun i\u00e7in CPU, fiziksel haf\u0131za, BIOS yaz\u0131l\u0131m\u0131 gibi par\u00e7alar da sanalla\u015ft\u0131r\u0131lmaktad\u0131r. Bununla birlikte k\u00f6t\u00fc niyetli bir i\u015fletim sistemi sistemde olsa bile di\u011fer i\u015fletim sistemlerine ula\u015famayacakt\u0131r. Performance: .... syf 63 KVM \u00c7ekirdek Mod\u00fcl\u00fc KVM'nin \u00e7ekirdek mod\u00fcl\u00fc temel sanalla\u015ft\u0131rma i\u015flevlerini yapmaktad\u0131r bunlardan baz\u0131lar\u0131 CPU em\u00fclasyonu, MMU sanalla\u015ft\u0131rmas\u0131 vb. Ancak KVM giri\u015f \u00e7\u0131k\u0131\u015f sistemleri i\u00e7in bir sanalla\u015ft\u0131rma yapmaz [63].","title":"KVM"},{"location":"kvm/#kvm-nedir","text":"KVM, Linux \u00e7ekirde\u011fini tip-1 hypervisor'e d\u00f6n\u00fc\u015ft\u00fcren bir mod\u00fcld\u00fcr. Ayn\u0131 zamanda QEMU ile birle\u015ferek tip-2 hyperviz\u00f6r'e d\u00f6n\u00fc\u015ft\u00fcrebilmektedir. X86 i\u015flemciler i\u00e7in tasarlanm\u0131\u015ft\u0131r. KVM, sanalla\u015ft\u0131rmak i\u00e7in Intel VT-x veya AMD-V gibi \u00f6zel donan\u0131m gerektirir. KVM geli\u015ftiricileri Popek ve Goldberg'in \u00f6nerdi\u011fi 3 temel \u015fart\u0131 \u015fu \u015fekilde sa\u011flam\u0131\u015flard\u0131r. Equivalence: KVM, herhangi bir i\u015fletim sistemi fark\u0131 olmadan ve bir de\u011fi\u015fiklik yapmadan herhangi bir x86 i\u015fletim sistemini \u00e7al\u0131\u015ft\u0131rabilmelidir. Safety: KVM, sanal makineler aras\u0131nda b\u00fct\u00fcn bir izolasyon sa\u011flamaktad\u0131r. Bunun i\u00e7in CPU, fiziksel haf\u0131za, BIOS yaz\u0131l\u0131m\u0131 gibi par\u00e7alar da sanalla\u015ft\u0131r\u0131lmaktad\u0131r. Bununla birlikte k\u00f6t\u00fc niyetli bir i\u015fletim sistemi sistemde olsa bile di\u011fer i\u015fletim sistemlerine ula\u015famayacakt\u0131r. Performance: .... syf 63","title":"KVM Nedir"},{"location":"kvm/#kvm-cekirdek-modulu","text":"KVM'nin \u00e7ekirdek mod\u00fcl\u00fc temel sanalla\u015ft\u0131rma i\u015flevlerini yapmaktad\u0131r bunlardan baz\u0131lar\u0131 CPU em\u00fclasyonu, MMU sanalla\u015ft\u0131rmas\u0131 vb. Ancak KVM giri\u015f \u00e7\u0131k\u0131\u015f sistemleri i\u00e7in bir sanalla\u015ft\u0131rma yapmaz [63].","title":"KVM \u00c7ekirdek Mod\u00fcl\u00fc"},{"location":"projeler/","text":"Yararl\u0131 Linkler \u00d6rnek proje ve kaynaklar burada listelenecektir. Virtualization Virtualization Hakk\u0131nda Dersler link Awesome Virtualization - link Sistem Programlama CS 361: Systems Programming link KVM KVM-API [link] (https://lwn.net/Articles/658511/) KVM-Hello link Implement KVM - link KVM Tool - link KVM Sample - link Rust !!Con 2019 - Build your own virtual machine with /dev/kvm and Rust! by Josh Triplett - link","title":"Yararl\u0131 Projeler"},{"location":"projeler/#yararl-linkler","text":"\u00d6rnek proje ve kaynaklar burada listelenecektir.","title":"Yararl\u0131 Linkler"},{"location":"projeler/#virtualization","text":"Virtualization Hakk\u0131nda Dersler link Awesome Virtualization - link","title":"Virtualization"},{"location":"projeler/#sistem-programlama","text":"CS 361: Systems Programming link","title":"Sistem Programlama"},{"location":"projeler/#kvm","text":"KVM-API [link] (https://lwn.net/Articles/658511/) KVM-Hello link Implement KVM - link KVM Tool - link KVM Sample - link","title":"KVM"},{"location":"projeler/#rust","text":"!!Con 2019 - Build your own virtual machine with /dev/kvm and Rust! by Josh Triplett - link","title":"Rust"}]}